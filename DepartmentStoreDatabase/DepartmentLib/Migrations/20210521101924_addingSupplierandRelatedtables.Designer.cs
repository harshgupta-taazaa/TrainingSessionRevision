// <auto-generated />
using DepartmentLib.Databasecontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DepartmentLib.Migrations
{
    [DbContext(typeof(DepartmentContext))]
    [Migration("20210521101924_addingSupplierandRelatedtables")]
    partial class addingSupplierandRelatedtables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DepartmentLib.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PinCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("StaffAddress")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DepartmentLib.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Categorydescription")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DepartmentLib.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsInStock")
                        .HasColumnType("boolean");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("productId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("productId")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("DepartmentLib.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductBrand")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ProductName")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("DepartmentLib.Entities.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DeliveryDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("ProductAmount")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ProductOrder");
                });

            modelBuilder.Entity("DepartmentLib.Entities.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("ProductCostPrice")
                        .HasColumnType("real");

                    b.Property<float>("ProductSellingPrice")
                        .HasColumnType("real");

                    b.Property<int>("productId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("productId")
                        .IsUnique();

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("DepartmentLib.Entities.ProductSupplier", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSupplier");
                });

            modelBuilder.Entity("DepartmentLib.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("RoleDescription")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("StaffRole")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DepartmentLib.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)")
                        .HasMaxLength(10);

                    b.Property<string>("LastName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("Salary")
                        .HasColumnType("integer")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("DepartmentLib.Entities.Suppliers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("integer");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("ProductOrderId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("DepartmentLib.Entities.Address", b =>
                {
                    b.HasOne("DepartmentLib.Entities.Staff", "staff")
                        .WithOne()
                        .HasForeignKey("DepartmentLib.Entities.Address", "StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentLib.Entities.Inventory", b =>
                {
                    b.HasOne("DepartmentLib.Entities.Product", "product")
                        .WithOne()
                        .HasForeignKey("DepartmentLib.Entities.Inventory", "productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentLib.Entities.Product", b =>
                {
                    b.HasOne("DepartmentLib.Entities.Category", "Category")
                        .WithMany("product")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentLib.Entities.ProductPrice", b =>
                {
                    b.HasOne("DepartmentLib.Entities.Product", "product")
                        .WithOne()
                        .HasForeignKey("DepartmentLib.Entities.ProductPrice", "productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentLib.Entities.ProductSupplier", b =>
                {
                    b.HasOne("DepartmentLib.Entities.Product", "product")
                        .WithMany("productSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentLib.Entities.Suppliers", "suppliers")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentLib.Entities.Staff", b =>
                {
                    b.HasOne("DepartmentLib.Entities.Role", "Role")
                        .WithOne()
                        .HasForeignKey("DepartmentLib.Entities.Staff", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentLib.Entities.Suppliers", b =>
                {
                    b.HasOne("DepartmentLib.Entities.ProductOrder", "productOrder")
                        .WithMany("Supplier")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
